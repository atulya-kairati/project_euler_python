# // The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# // 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# // Let us list the factors of the first seven triangle numbers:

# // 1: 1
# // 3: 1,3
# // 6: 1,2,3,6
# // 10: 1,2,5,10
# // 15: 1,3,5,15
# // 21: 1,3,7,21
# // 28: 1,2,4,7,14,28
# // We can see that 28 is the first triangle number to have over five divisors.

# // What is the value of the first triangle number to have over five hundred divisors?
# // _________________---___--__--_--_--_-__-_______

# // Method to find no of divisors
# // if you have the prime factorization of the number n,then to calculate how many divisors it has, you take all the exponents in the factorization, add 1 to each, and then multiply these "exponents + 1"s together.

def get_triangle_number():
  n = 1
  while True:
    yield n*(n + 1)/2
    n += 1


def get_prime_factors(number: int):
  factor = dict()
  div = 2
  while number > 1:
    while number % div == 0:
      factor[div] = factor.get(div, 0) + 1
      number = number // div
    div += 1
  return factor
  
def get_no_of_divisors(number: int):
  prime_factors = get_prime_factors(number)
  no_of_divisors = 1
  for exp in prime_factors.values():
    no_of_divisors *= (exp + 1)
  return no_of_divisors
  
  
def main():
  max_divs = 500
  
  for triangle_num in get_triangle_number():
    print(triangle_num)
    if get_no_of_divisors(triangle_num) >= 500:
      print(triangle_num)
      break


if __name__ == '__main__':
  main()